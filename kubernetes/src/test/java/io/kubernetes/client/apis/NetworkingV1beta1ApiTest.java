/*
 * Kubernetes
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.14.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.kubernetes.client.apis;

import io.kubernetes.client.ApiException;
import io.kubernetes.client.models.NetworkingV1beta1Ingress;
import io.kubernetes.client.models.NetworkingV1beta1IngressList;
import io.kubernetes.client.models.V1APIResourceList;
import io.kubernetes.client.models.V1DeleteOptions;
import io.kubernetes.client.models.V1Status;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NetworkingV1beta1Api
 */
@Ignore
public class NetworkingV1beta1ApiTest {

    private final NetworkingV1beta1Api api = new NetworkingV1beta1Api();

    
    /**
     * 
     *
     * create an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNamespacedIngressTest() throws ApiException {
        String namespace = null;
        NetworkingV1beta1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        NetworkingV1beta1Ingress response = api.createNamespacedIngress(namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1Status response = api.deleteCollectionNamespacedIngress(namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        V1DeleteOptions body = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1Status response = api.deleteNamespacedIngress(name, namespace, pretty, body, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listIngressForAllNamespacesTest() throws ApiException {
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String pretty = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        NetworkingV1beta1IngressList response = api.listIngressForAllNamespaces(_continue, fieldSelector, labelSelector, limit, pretty, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listNamespacedIngressTest() throws ApiException {
        String namespace = null;
        String pretty = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        NetworkingV1beta1IngressList response = api.listNamespacedIngress(namespace, pretty, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        NetworkingV1beta1Ingress response = api.patchNamespacedIngress(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        Object body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        NetworkingV1beta1Ingress response = api.patchNamespacedIngressStatus(name, namespace, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        NetworkingV1beta1Ingress response = api.readNamespacedIngress(name, namespace, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        String pretty = null;
        NetworkingV1beta1Ingress response = api.readNamespacedIngressStatus(name, namespace, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressTest() throws ApiException {
        String name = null;
        String namespace = null;
        NetworkingV1beta1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        NetworkingV1beta1Ingress response = api.replaceNamespacedIngress(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified Ingress
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceNamespacedIngressStatusTest() throws ApiException {
        String name = null;
        String namespace = null;
        NetworkingV1beta1Ingress body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        NetworkingV1beta1Ingress response = api.replaceNamespacedIngressStatus(name, namespace, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
