/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.openapi.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.kubernetes.client.openapi.models.V1beta1ExternalDocumentation;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for V1beta1JSONSchemaProps
 */
public class V1beta1JSONSchemaPropsTest {
    private final V1beta1JSONSchemaProps model = new V1beta1JSONSchemaProps();

    /**
     * Model tests for V1beta1JSONSchemaProps
     */
    @Test
    public void testV1beta1JSONSchemaProps() {
        // TODO: test V1beta1JSONSchemaProps
    }

    /**
     * Test the property '$ref'
     */
    @Test
    public void $refTest() {
        // TODO: test $ref
    }

    /**
     * Test the property '$schema'
     */
    @Test
    public void $schemaTest() {
        // TODO: test $schema
    }

    /**
     * Test the property 'additionalItems'
     */
    @Test
    public void additionalItemsTest() {
        // TODO: test additionalItems
    }

    /**
     * Test the property 'additionalProperties'
     */
    @Test
    public void additionalPropertiesTest() {
        // TODO: test additionalProperties
    }

    /**
     * Test the property 'allOf'
     */
    @Test
    public void allOfTest() {
        // TODO: test allOf
    }

    /**
     * Test the property 'anyOf'
     */
    @Test
    public void anyOfTest() {
        // TODO: test anyOf
    }

    /**
     * Test the property '_default'
     */
    @Test
    public void _defaultTest() {
        // TODO: test _default
    }

    /**
     * Test the property 'definitions'
     */
    @Test
    public void definitionsTest() {
        // TODO: test definitions
    }

    /**
     * Test the property 'dependencies'
     */
    @Test
    public void dependenciesTest() {
        // TODO: test dependencies
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property '_enum'
     */
    @Test
    public void _enumTest() {
        // TODO: test _enum
    }

    /**
     * Test the property 'example'
     */
    @Test
    public void exampleTest() {
        // TODO: test example
    }

    /**
     * Test the property 'exclusiveMaximum'
     */
    @Test
    public void exclusiveMaximumTest() {
        // TODO: test exclusiveMaximum
    }

    /**
     * Test the property 'exclusiveMinimum'
     */
    @Test
    public void exclusiveMinimumTest() {
        // TODO: test exclusiveMinimum
    }

    /**
     * Test the property 'externalDocs'
     */
    @Test
    public void externalDocsTest() {
        // TODO: test externalDocs
    }

    /**
     * Test the property 'format'
     */
    @Test
    public void formatTest() {
        // TODO: test format
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'items'
     */
    @Test
    public void itemsTest() {
        // TODO: test items
    }

    /**
     * Test the property 'maxItems'
     */
    @Test
    public void maxItemsTest() {
        // TODO: test maxItems
    }

    /**
     * Test the property 'maxLength'
     */
    @Test
    public void maxLengthTest() {
        // TODO: test maxLength
    }

    /**
     * Test the property 'maxProperties'
     */
    @Test
    public void maxPropertiesTest() {
        // TODO: test maxProperties
    }

    /**
     * Test the property 'maximum'
     */
    @Test
    public void maximumTest() {
        // TODO: test maximum
    }

    /**
     * Test the property 'minItems'
     */
    @Test
    public void minItemsTest() {
        // TODO: test minItems
    }

    /**
     * Test the property 'minLength'
     */
    @Test
    public void minLengthTest() {
        // TODO: test minLength
    }

    /**
     * Test the property 'minProperties'
     */
    @Test
    public void minPropertiesTest() {
        // TODO: test minProperties
    }

    /**
     * Test the property 'minimum'
     */
    @Test
    public void minimumTest() {
        // TODO: test minimum
    }

    /**
     * Test the property 'multipleOf'
     */
    @Test
    public void multipleOfTest() {
        // TODO: test multipleOf
    }

    /**
     * Test the property 'not'
     */
    @Test
    public void notTest() {
        // TODO: test not
    }

    /**
     * Test the property 'nullable'
     */
    @Test
    public void nullableTest() {
        // TODO: test nullable
    }

    /**
     * Test the property 'oneOf'
     */
    @Test
    public void oneOfTest() {
        // TODO: test oneOf
    }

    /**
     * Test the property 'pattern'
     */
    @Test
    public void patternTest() {
        // TODO: test pattern
    }

    /**
     * Test the property 'patternProperties'
     */
    @Test
    public void patternPropertiesTest() {
        // TODO: test patternProperties
    }

    /**
     * Test the property 'properties'
     */
    @Test
    public void propertiesTest() {
        // TODO: test properties
    }

    /**
     * Test the property 'required'
     */
    @Test
    public void requiredTest() {
        // TODO: test required
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'uniqueItems'
     */
    @Test
    public void uniqueItemsTest() {
        // TODO: test uniqueItems
    }

    /**
     * Test the property 'xKubernetesEmbeddedResource'
     */
    @Test
    public void xKubernetesEmbeddedResourceTest() {
        // TODO: test xKubernetesEmbeddedResource
    }

    /**
     * Test the property 'xKubernetesIntOrString'
     */
    @Test
    public void xKubernetesIntOrStringTest() {
        // TODO: test xKubernetesIntOrString
    }

    /**
     * Test the property 'xKubernetesPreserveUnknownFields'
     */
    @Test
    public void xKubernetesPreserveUnknownFieldsTest() {
        // TODO: test xKubernetesPreserveUnknownFields
    }

}
