/*
 * Kubernetes
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.15.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.kubernetes.client.openapi.apis;

import io.kubernetes.client.openapi.ApiException;
import io.kubernetes.client.openapi.models.V1APIResourceList;
import io.kubernetes.client.openapi.models.V1DeleteOptions;
import io.kubernetes.client.openapi.models.V1Status;
import io.kubernetes.client.openapi.models.V1beta1APIService;
import io.kubernetes.client.openapi.models.V1beta1APIServiceList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiregistrationV1beta1Api
 */
@Ignore
public class ApiregistrationV1beta1ApiTest {

    private final ApiregistrationV1beta1Api api = new ApiregistrationV1beta1Api();

    
    /**
     * 
     *
     * create an APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAPIServiceTest() throws ApiException {
        V1beta1APIService body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        V1beta1APIService response = api.createAPIService(body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete an APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAPIServiceTest() throws ApiException {
        String name = null;
        String pretty = null;
        String dryRun = null;
        Integer gracePeriodSeconds = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        V1DeleteOptions body = null;
        V1Status response = api.deleteAPIService(name, pretty, dryRun, gracePeriodSeconds, orphanDependents, propagationPolicy, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * delete collection of APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCollectionAPIServiceTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String dryRun = null;
        String fieldSelector = null;
        Integer gracePeriodSeconds = null;
        String labelSelector = null;
        Integer limit = null;
        Boolean orphanDependents = null;
        String propagationPolicy = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1DeleteOptions body = null;
        V1Status response = api.deleteCollectionAPIService(pretty, allowWatchBookmarks, _continue, dryRun, fieldSelector, gracePeriodSeconds, labelSelector, limit, orphanDependents, propagationPolicy, resourceVersion, timeoutSeconds, watch, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * get available resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAPIResourcesTest() throws ApiException {
        V1APIResourceList response = api.getAPIResources();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * list or watch objects of kind APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAPIServiceTest() throws ApiException {
        String pretty = null;
        Boolean allowWatchBookmarks = null;
        String _continue = null;
        String fieldSelector = null;
        String labelSelector = null;
        Integer limit = null;
        String resourceVersion = null;
        Integer timeoutSeconds = null;
        Boolean watch = null;
        V1beta1APIServiceList response = api.listAPIService(pretty, allowWatchBookmarks, _continue, fieldSelector, labelSelector, limit, resourceVersion, timeoutSeconds, watch);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAPIServiceTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        V1beta1APIService response = api.patchAPIService(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * partially update status of the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchAPIServiceStatusTest() throws ApiException {
        String name = null;
        Object body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        Boolean force = null;
        V1beta1APIService response = api.patchAPIServiceStatus(name, body, pretty, dryRun, fieldManager, force);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAPIServiceTest() throws ApiException {
        String name = null;
        String pretty = null;
        Boolean exact = null;
        Boolean export = null;
        V1beta1APIService response = api.readAPIService(name, pretty, exact, export);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * read status of the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readAPIServiceStatusTest() throws ApiException {
        String name = null;
        String pretty = null;
        V1beta1APIService response = api.readAPIServiceStatus(name, pretty);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAPIServiceTest() throws ApiException {
        String name = null;
        V1beta1APIService body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        V1beta1APIService response = api.replaceAPIService(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * replace status of the specified APIService
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replaceAPIServiceStatusTest() throws ApiException {
        String name = null;
        V1beta1APIService body = null;
        String pretty = null;
        String dryRun = null;
        String fieldManager = null;
        V1beta1APIService response = api.replaceAPIServiceStatus(name, body, pretty, dryRun, fieldManager);

        // TODO: test validations
    }
    
}
